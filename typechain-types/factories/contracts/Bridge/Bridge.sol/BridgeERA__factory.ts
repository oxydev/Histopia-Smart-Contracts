/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BridgeERA,
  BridgeERAInterface,
} from "../../../../contracts/Bridge/Bridge.sol/BridgeERA";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ERA",
        name: "_ERA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_feeCollector",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "destChain",
        type: "uint256",
      },
    ],
    name: "Locked",
    type: "event",
  },
  {
    inputs: [],
    name: "ERAContract",
    outputs: [
      {
        internalType: "contract ERA",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MINIMUM_THRESHOLD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeCollector",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "destChain",
        type: "uint256",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052670de0b6b3a764000060005534801561001c57600080fd5b506040516104b83803806104b883398101604081905261003b9161006c565b600280546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100bd565b6000806040838503121561007e578182fd5b8251610089816100a5565b602084015190925061009a816100a5565b809150509250929050565b6001600160a01b03811681146100ba57600080fd5b50565b6103ec806100cc6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635297793b146100515780638b003ecf1461006f578063c415b95c14610084578063cf27cfc41461008c575b600080fd5b6100596100a1565b60405161006691906102c4565b60405180910390f35b6100776100b0565b6040516100669190610362565b6100596100b6565b61009f61009a366004610282565b6100c5565b005b6002546001600160a01b031681565b60005481565b6001546001600160a01b031681565b60005483116100ef5760405162461bcd60e51b81526004016100e690610315565b60405180910390fd5b6002546001600160a01b0316639dc29fac33606461010e87606361038b565b610118919061036b565b6040518363ffffffff1660e01b81526004016101359291906102fc565b600060405180830381600087803b15801561014f57600080fd5b505af1158015610163573d6000803e3d6000fd5b50506002546001546001600160a01b0391821693506323b872dd925033911661018d60648861036b565b6040518463ffffffff1660e01b81526004016101ab939291906102d8565b602060405180830381600087803b1580156101c557600080fd5b505af11580156101d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fd919061025b565b50806001600160a01b0383167f55016b6cc60c3d15b7b1ebd0ab766c07b3082c98a5b4d1d7ff012a97652a4b1d606461023787606361038b565b610241919061036b565b60405161024e9190610362565b60405180910390a3505050565b60006020828403121561026c578081fd5b8151801515811461027b578182fd5b9392505050565b600080600060608486031215610296578182fd5b8335925060208401356001600160a01b03811681146102b3578283fd5b929592945050506040919091013590565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6020808252602d908201527f416d6f756e74206d7573742062652067726561746572207468616e204d696e6960408201526c1b5d5b48151a1c995cda1bdb19609a1b606082015260800190565b90815260200190565b60008261038657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156103b157634e487b7160e01b81526011600452602481fd5b50029056fea2646970667358221220fd36170910fb98104b7baa0f1910088096de07bfa0dce2f9b05f7a504ec2851364736f6c63430008010033";

type BridgeERAConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeERAConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeERA__factory extends ContractFactory {
  constructor(...args: BridgeERAConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ERA: PromiseOrValue<string>,
    _feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeERA> {
    return super.deploy(
      _ERA,
      _feeCollector,
      overrides || {}
    ) as Promise<BridgeERA>;
  }
  override getDeployTransaction(
    _ERA: PromiseOrValue<string>,
    _feeCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ERA, _feeCollector, overrides || {});
  }
  override attach(address: string): BridgeERA {
    return super.attach(address) as BridgeERA;
  }
  override connect(signer: Signer): BridgeERA__factory {
    return super.connect(signer) as BridgeERA__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeERAInterface {
    return new utils.Interface(_abi) as BridgeERAInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeERA {
    return new Contract(address, _abi, signerOrProvider) as BridgeERA;
  }
}
