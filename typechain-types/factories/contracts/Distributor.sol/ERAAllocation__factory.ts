/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERAAllocation,
  ERAAllocationInterface,
} from "../../../contracts/Distributor.sol/ERAAllocation";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "shareHolders",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "sharesPerSecond",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "ERA",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allocations",
    outputs: [
      {
        internalType: "uint256",
        name: "sharePerSecond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastWithdrawalTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawableAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOutstandingShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareholder",
        type: "address",
      },
    ],
    name: "getTotalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUnlockedShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWithdrawnShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_ERA",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c2d38038062000c2d8339810160408190526200003491620001fa565b60006200004062000182565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060005b82518110156200015f576040518060600160405280838381518110620000c357634e487b7160e01b600052603260045260246000fd5b602002602001015181526020014381526020016000815250600560008584815181106200010057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000820151816000015560208201518160010155604082015181600201559050508080620001569062000348565b9150506200008d565b5042600281905562000176906303b538006200032d565b60035550620003929050565b3390565b600082601f83011262000197578081fd5b81516020620001b0620001aa8362000307565b620002d4565b8281528181019085830183850287018401881015620001cd578586fd5b855b85811015620001ed57815184529284019290840190600101620001cf565b5090979650505050505050565b600080604083850312156200020d578182fd5b82516001600160401b038082111562000224578384fd5b818501915085601f83011262000238578384fd5b815160206200024b620001aa8362000307565b82815281810190858301838502870184018b101562000268578889fd5b8896505b84871015620002a15780516001600160a01b03811681146200028c57898afd5b8352600196909601959183019183016200026c565b5091880151919650909350505080821115620002bb578283fd5b50620002ca8582860162000186565b9150509250929050565b604051601f8201601f191681016001600160401b0381118282101715620002ff57620002ff6200037c565b604052919050565b60006001600160401b038211156200032357620003236200037c565b5060209081020190565b6000821982111562000343576200034362000366565b500190565b60006000198214156200035f576200035f62000366565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61088b80620003a26000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c8063864709e61161008c578063c4d66de811610066578063c4d66de814610176578063de2b4e9814610189578063f20d863414610191578063f2fde38b146101a4576100df565b8063864709e6146101515780638da5cb5b14610159578063a2d966ea1461016e576100df565b806352a9039c116100bd57806352a9039c1461011f578063715018a61461014157806378e9792514610149576100df565b806303c17172146100e457806314dba423146100f95780633197cbb614610117575b600080fd5b6100f76100f2366004610660565b6101b7565b005b6101016102cd565b60405161010e91906107a1565b60405180910390f35b610101610323565b61013261012d366004610644565b610329565b60405161010e939291906107aa565b6100f761034a565b6101016103e9565b6101016103ef565b61016161042f565b60405161010e91906106ab565b61016161043e565b6100f7610184366004610644565b61044d565b6101016104ed565b61010161019f366004610644565b61050d565b6100f76101b2366004610644565b610548565b60006003544211156101cc57506003546101cf565b50425b3360009081526005602052604081206001810180549084905590916101ff6101f78584610615565b845490610628565b60028401549091506102119082610634565b600284018190556102229086610615565b60028401556001546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906340c10f199061027290899089906004016106bf565b602060405180830381600087803b15801561028c57600080fd5b505af11580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c4919061068b565b50505050505050565b6000806003544311156102e357506003546102e6565b50435b3360009081526005602052604090206001015461030390826107f7565b3360009081526005602052604090205461031d91906107d8565b91505090565b60035481565b60056020526000908152604090208054600182015460029092015490919083565b610352610640565b6001600160a01b031661036361042f565b6001600160a01b0316146103925760405162461bcd60e51b81526004016103899061076c565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60025481565b600254336000908152600560205260408120600101549091610410916107f7565b3360009081526005602052604090205461042a91906107d8565b905090565b6000546001600160a01b031690565b6001546001600160a01b031681565b610455610640565b6001600160a01b031661046661042f565b6001600160a01b03161461048c5760405162461bcd60e51b81526004016103899061076c565b60045460ff16156104af5760405162461bcd60e51b815260040161038990610735565b6004805460ff1916600190811790915580546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19909216919091179055565b3360009081526005602052604081206001015460035461041091906107f7565b600060025460035461051f91906107f7565b6001600160a01b03831660009081526005602052604090205461054291906107d8565b92915050565b610550610640565b6001600160a01b031661056161042f565b6001600160a01b0316146105875760405162461bcd60e51b81526004016103899061076c565b6001600160a01b0381166105ad5760405162461bcd60e51b8152600401610389906106d8565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061062182846107f7565b9392505050565b600061062182846107d8565b600061062182846107c0565b3390565b600060208284031215610655578081fd5b81356106218161083d565b60008060408385031215610672578081fd5b823561067d8161083d565b946020939093013593505050565b60006020828403121561069c578081fd5b81518015158114610621578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f416c726561647920696e697469616c697a65642e000000000000000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b600082198211156107d3576107d361080e565b500190565b60008160001904831182151516156107f2576107f261080e565b500290565b6000828210156108095761080961080e565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001600160a01b038116811461085257600080fd5b5056fea264697066735822122027979263beefa9d1892754790c8e53c52deaa7f158d703e9f6c875d5feb2d83264736f6c63430008010033";

type ERAAllocationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERAAllocationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERAAllocation__factory extends ContractFactory {
  constructor(...args: ERAAllocationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    shareHolders: PromiseOrValue<string>[],
    sharesPerSecond: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERAAllocation> {
    return super.deploy(
      shareHolders,
      sharesPerSecond,
      overrides || {}
    ) as Promise<ERAAllocation>;
  }
  override getDeployTransaction(
    shareHolders: PromiseOrValue<string>[],
    sharesPerSecond: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      shareHolders,
      sharesPerSecond,
      overrides || {}
    );
  }
  override attach(address: string): ERAAllocation {
    return super.attach(address) as ERAAllocation;
  }
  override connect(signer: Signer): ERAAllocation__factory {
    return super.connect(signer) as ERAAllocation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERAAllocationInterface {
    return new utils.Interface(_abi) as ERAAllocationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERAAllocation {
    return new Contract(address, _abi, signerOrProvider) as ERAAllocation;
  }
}
