/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Multicall,
  MulticallInterface,
} from "../../../contracts/multicall.sol/Multicall";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105f1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80630f28c97d1461007d578063252dba421461009b57806327e86d6e146100bc5780634d2301cc146100c457806372425d9d146100d757806386d516e8146100df578063a8b0574e146100e7578063ee82ac5e146100fc575b600080fd5b61008561010f565b6040516100929190610474565b60405180910390f35b6100ae6100a93660046102f7565b610113565b60405161009292919061047d565b61008561028a565b6100856100d23660046102d6565b61029d565b6100856102aa565b6100856102ae565b6100ef6102b2565b6040516100929190610460565b61008561010a36600461042c565b6102b6565b4290565b805143906060906001600160401b0381111561013f57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561017257816020015b606081526020019060019003908161015d5790505b50905060005b8351811015610284576000808583815181106101a457634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03168684815181106101d957634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516040516101f29190610444565b6000604051808303816000865af19150503d806000811461022f576040519150601f19603f3d011682016040523d82523d6000602084013e610234565b606091505b50915091508161024357600080fd5b8084848151811061026457634e487b7160e01b600052603260045260246000fd5b60200260200101819052505050808061027c90610574565b915050610178565b50915091565b600061029760014361052d565b40905090565b6001600160a01b03163190565b4490565b4590565b4190565b4090565b80356001600160a01b03811681146102d157600080fd5b919050565b6000602082840312156102e7578081fd5b6102f0826102ba565b9392505050565b60006020808385031215610309578182fd5b82356001600160401b038082111561031f578384fd5b818501915085601f830112610332578384fd5b813581811115610344576103446105a5565b61035184858302016104fd565b81815284810190848601875b8481101561041d5781358701601f196040828e038201121561037d578a8bfd5b61038760406104fd565b6103928b84016102ba565b81526040830135898111156103a5578c8dfd5b8084019350508d603f8401126103b9578b8cfd5b8a830135898111156103cd576103cd6105a5565b6103dd8c84601f840116016104fd565b92508083528e60408286010111156103f3578c8dfd5b80604085018d85013782018b018c9052808b0191909152855250928701929087019060010161035d565b50909998505050505050505050565b60006020828403121561043d578081fd5b5035919050565b60008251610456818460208701610544565b9190910192915050565b6001600160a01b0391909116815260200190565b90815260200190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156104ef57878603605f19018452815180518088526104d081888a01898501610544565b601f01601f1916969096018501955092840192908401906001016104a9565b509398975050505050505050565b604051601f8201601f191681016001600160401b0381118282101715610525576105256105a5565b604052919050565b60008282101561053f5761053f61058f565b500390565b60005b8381101561055f578181015183820152602001610547565b8381111561056e576000848401525b50505050565b60006000198214156105885761058861058f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204bbf0ffb19daa979e19e3cd25266fe89925e931b0fab92c990f005446fda91d664736f6c63430008010033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  override connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
