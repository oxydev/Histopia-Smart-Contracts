/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ChallengerInterface extends utils.Interface {
  functions: {
    "ERA()": FunctionFragment;
    "activeChallenge()": FunctionFragment;
    "addChallenge(uint256,uint256,uint256,bytes32)": FunctionFragment;
    "challengeRound()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "submit(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ERA"
      | "activeChallenge"
      | "addChallenge"
      | "challengeRound"
      | "owner"
      | "renounceOwnership"
      | "submit"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ERA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeChallenge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addChallenge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "ERA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChallengeWinner(address,uint256,string)": EventFragment;
    "NewChallenge(uint256,uint256,uint256,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChallengeWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewChallenge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ChallengeWinnerEventObject {
  winner: string;
  challengeRound: BigNumber;
  plainAnswer: string;
}
export type ChallengeWinnerEvent = TypedEvent<
  [string, BigNumber, string],
  ChallengeWinnerEventObject
>;

export type ChallengeWinnerEventFilter = TypedEventFilter<ChallengeWinnerEvent>;

export interface NewChallengeEventObject {
  startingTimestamp: BigNumber;
  rewardERA: BigNumber;
  duration: BigNumber;
  challengeRound: BigNumber;
  answerHash: string;
}
export type NewChallengeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  NewChallengeEventObject
>;

export type NewChallengeEventFilter = TypedEventFilter<NewChallengeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Challenger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChallengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERA(overrides?: CallOverrides): Promise<[string]>;

    activeChallenge(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        startingTimestamp: BigNumber;
        rewardERA: BigNumber;
        duration: BigNumber;
        answerHash: string;
        hasWinner: boolean;
      }
    >;

    addChallenge(
      startingTimestamp: PromiseOrValue<BigNumberish>,
      rewardERA: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      answerHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    challengeRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submit(
      plainAnswer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ERA(overrides?: CallOverrides): Promise<string>;

  activeChallenge(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, boolean] & {
      startingTimestamp: BigNumber;
      rewardERA: BigNumber;
      duration: BigNumber;
      answerHash: string;
      hasWinner: boolean;
    }
  >;

  addChallenge(
    startingTimestamp: PromiseOrValue<BigNumberish>,
    rewardERA: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    answerHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  challengeRound(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submit(
    plainAnswer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERA(overrides?: CallOverrides): Promise<string>;

    activeChallenge(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, boolean] & {
        startingTimestamp: BigNumber;
        rewardERA: BigNumber;
        duration: BigNumber;
        answerHash: string;
        hasWinner: boolean;
      }
    >;

    addChallenge(
      startingTimestamp: PromiseOrValue<BigNumberish>,
      rewardERA: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      answerHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    challengeRound(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    submit(
      plainAnswer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChallengeWinner(address,uint256,string)"(
      winner?: null,
      challengeRound?: PromiseOrValue<BigNumberish> | null,
      plainAnswer?: null
    ): ChallengeWinnerEventFilter;
    ChallengeWinner(
      winner?: null,
      challengeRound?: PromiseOrValue<BigNumberish> | null,
      plainAnswer?: null
    ): ChallengeWinnerEventFilter;

    "NewChallenge(uint256,uint256,uint256,uint256,bytes32)"(
      startingTimestamp?: null,
      rewardERA?: null,
      duration?: null,
      challengeRound?: PromiseOrValue<BigNumberish> | null,
      answerHash?: null
    ): NewChallengeEventFilter;
    NewChallenge(
      startingTimestamp?: null,
      rewardERA?: null,
      duration?: null,
      challengeRound?: PromiseOrValue<BigNumberish> | null,
      answerHash?: null
    ): NewChallengeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ERA(overrides?: CallOverrides): Promise<BigNumber>;

    activeChallenge(overrides?: CallOverrides): Promise<BigNumber>;

    addChallenge(
      startingTimestamp: PromiseOrValue<BigNumberish>,
      rewardERA: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      answerHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    challengeRound(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submit(
      plainAnswer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeChallenge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addChallenge(
      startingTimestamp: PromiseOrValue<BigNumberish>,
      rewardERA: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      answerHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    challengeRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submit(
      plainAnswer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
